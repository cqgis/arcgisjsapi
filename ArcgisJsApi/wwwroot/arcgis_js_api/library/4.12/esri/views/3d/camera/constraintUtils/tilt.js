// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.12/esri/copyright.txt for details.
//>>built
define("require exports ../../../../core/compilerUtils ../../../../core/mathUtils ../../../../core/libs/gl-matrix-2/mat4 ../../../../core/libs/gl-matrix-2/mat4f64 ../../../../core/libs/gl-matrix-2/vec3 ../../../../core/libs/gl-matrix-2/vec3f64 ./common ../../state/utils/viewUtils ../../support/earthUtils ../../support/geometryUtils ../../support/mathUtils".split(" "),function(J,r,A,v,t,G,k,B,m,u,w,C,n){function D(c,a,b,d,f){void 0===b&&(b=m.defaultApplyOptions);void 0===d&&(d=a);void 0===f&&(f=!0);
a!==d&&d.copyFrom(a);p.eyeCenterDistance=0;p.requiresTwoSteps=!1;var e=x(c,a,b,void 0,p);if(0===e)return!1;t.mat4.identity(l);t.mat4.rotate(l,l,-e,a.viewRight);switch(b.tiltMode){case 1:k.vec3.transformMat4(h,a.viewForward,l);k.vec3.scale(h,h,p.eyeCenterDistance);k.vec3.add(d.center,a.eye,h);break;case 0:k.vec3.subtract(h,a.center,a.eye);k.vec3.transformMat4(h,h,l);k.vec3.subtract(d.eye,a.center,h);break;default:A.neverReached(b.tiltMode)}k.vec3.transformMat4(d.up,d.up,l);d.markViewDirty();return p.requiresTwoSteps&&
f?D(c,d,b,d,!1):!0}function x(c,a,b,d,f){void 0===b&&(b=m.defaultApplyOptions);void 0===d&&(d=m.defaultApplyOptions);if(!c.state.constraints.tilt)return 0;var e=c.state.constraints.tilt(a.distance,H);var g=b;if(0!==g.interactionType){var h=g.interactionStartCamera,l=g.interactionFactor,p=e.min,r=e.max,y=x(c,h,m.defaultApplyOptions,g),t=0===y?0:u.viewAngle(c.renderCoordsHelper,h.center,h.eye);e.min=p;e.max=r;2===g.interactionType?(m.hasConstraintType(g.selection,2)&&E(c,h,e),m.adjustRangeForInteraction(y,
t,!0,l,F,e)):m.adjustRangeForInteraction(y,t,!1,l,F,e)}2===d.interactionType&&m.hasConstraintType(d.selection,2)&&E(c,d.interactionStartCamera,e);if(1===b.tiltMode||1===d.tiltMode){a:{f&&(f.requiresTwoSteps=!1);switch(c.viewingMode){case "global":b=I;g=c.pointsOfInterest.centerOnSurfaceFrequent.estimatedSurfaceAltitude;d=g+w.earthRadius;g=c.renderCoordsHelper.intersectManifold(a.ray,g,q);b.eyeCenterDistance=a.distance;g?(b.eyeCenterDistance=k.vec3.distance(a.eye,q),b.tiltAtCenter=u.viewAngle(c.renderCoordsHelper,
q,a.eye)):c.state.isLocal?b.tiltAtCenter=u.viewAngle(c.renderCoordsHelper,a.center,a.eye):(C.sphere.closestPointOnSilhouette(C.sphere.wrap(d),a.ray,q),b.eyeCenterDistance=k.vec3.distance(a.eye,q),b.tiltAtCenter=n.acos(-k.vec3.dot(a.viewForward,k.vec3.normalize(q,q))));b.radius=d;b.eyeRadius=k.vec3.length(a.eye);b.constraints=c.state.constraints;b.centerIsOnSurface=g;a=v.clamp(b.tiltAtCenter,e.min,e.max);if(1E-9<Math.abs(b.tiltAtCenter-a)){if(b.centerIsOnSurface){a=b.constraints;c=d=b.tiltAtCenter;
e=a.clampTilt(b.eyeCenterDistance,d);g=z(b,e);if(a.clampTilt(g,d)!==e)for(d=0;10>d&&1E-9<Math.abs(e-c);)g=(c+e)/2,h=z(b,g),h=a.clampTilt(h,g),1E-9<Math.abs(h-g)?c=g:e=g,d++;a=e;e=a;c=n.asin(b.radius/b.eyeRadius*Math.sin(b.tiltAtCenter));e=n.asin(b.radius/b.eyeRadius*Math.sin(e));c=b.eyeRadius>b.radius?c-e:e-c}else a=b.constraints.clampTilt(b.eyeCenterDistance,b.tiltAtCenter),f&&a<Math.PI/2&&(f.requiresTwoSteps=!0,a=Math.PI/2-1E-5),c=b.tiltAtCenter-Math.PI/2-(a-Math.PI/2);f&&(f.eyeCenterDistance=z(b,
a));f=c}else f=0;break a;case "local":d=u.viewAngle(c.renderCoordsHelper,a.center,a.eye);b=v.clamp(d,e.min,e.max);e=d-b;1E-9<Math.abs(e)?(f&&(d=c.pointsOfInterest.centerOnSurfaceFrequent.estimatedSurfaceAltitude,c=c.renderCoordsHelper.getAltitude(a.eye)-d,b=Math.cos(b),f.eyeCenterDistance=1E-4<Math.abs(b)?c/b:a.distance),f=e):f=0;break a;default:A.neverReached(c.viewingMode)}f=void 0}return f}f=u.viewAngle(c.renderCoordsHelper,a.center,a.eye);a=v.clamp(f,e.min,e.max);f-=a;f=1E-9<Math.abs(f)?f:0;return f}
function z(c,a){if(!c.centerIsOnSurface)return c.eyeCenterDistance;a=Math.PI-v.clamp(a,0,Math.PI);var b=n.asin(c.radius/c.eyeRadius*Math.sin(a)),d=Math.sin(Math.PI-a-b)/Math.sin(a);return c.eyeRadius<c.radius&&1<d?Math.sin(Math.PI-a-(Math.PI-b))/Math.sin(a)*c.eyeRadius:d*c.eyeRadius}function E(c,a,b){if(!c.state.isLocal){var d=c.state.constraints;if(d.altitude){c=k.vec3.squaredLength(a.center);var f=Math.sqrt(c);a=a.distance;var e=d.altitude.min+w.earthRadius,d=d.altitude.max+w.earthRadius,e=(e*e-
a*a-c)/(-2*f*a);b.min=Math.max(b.min,Math.min(Math.PI-n.acos((d*d-a*a-c)/(-2*f*a)),b.max));b.max=Math.min(b.max,Math.PI-n.acos(e))}}}Object.defineProperty(r,"__esModule",{value:!0});r.apply=D;r.error=x;var h=B.vec3f64.create(),l=G.mat4f64.create(),q=B.vec3f64.create(),F=n.deg2rad(5),H={min:0,max:0},I={constraints:null,radius:0,eyeRadius:0,centerIsOnSurface:!0,eyeCenterDistance:0,tiltAtCenter:0},p={eyeCenterDistance:0,requiresTwoSteps:!1}});