// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.13/esri/copyright.txt for details.
//>>built
define("require exports ../core/tsSupport/declareExtendsHelper ../core/tsSupport/decorateHelper ../core/tsSupport/paramHelper ../core/JSONSupport ../core/lang ../core/accessorSupport/decorators ./support/stretchRendererUtils ../tasks/support/colorRamps".split(" "),function(n,p,l,d,q,m,e,c,f,h){return function(k){function b(a){a=k.call(this)||this;a.colorRamp=null;a.computeGamma=!1;a.dynamicRangeAdjustment=!0;a.gamma=[];a.maxPercent=null;a.minPercent=null;a.numberOfStandardDeviations=null;a.outputMax=
null;a.outputMin=null;a.sigmoidStrengthLevel=null;a.statistics=[];a.histograms=null;a.useGamma=!1;a.stretchType="none";a.type="raster-stretch";return a}l(b,k);g=b;b.prototype.readColorRamp=function(a,b){if(a)return h.fromJSON(a)};b.prototype.writeStatistics=function(a,b,c){null==a||0===a.length?a=null:a[0]instanceof Array||(a=a.map(function(a){return[a.min,a.max,a.avg,a.stddev]}));b[c]=a};b.prototype.clone=function(){return new g({stretchType:this.stretchType,outputMin:this.outputMin,outputMax:this.outputMax,
useGamma:this.useGamma,computeGamma:this.computeGamma,statistics:e.clone(this.statistics),gamma:e.clone(this.gamma),sigmoidStrengthLevel:this.sigmoidStrengthLevel,numberOfStandardDeviations:this.numberOfStandardDeviations,minPercent:this.minPercent,maxPercent:this.maxPercent,colorRamp:e.clone(this.colorRamp),histograms:e.clone(this.histograms),dynamicRangeAdjustment:this.dynamicRangeAdjustment})};var g;d([c.property({types:h.types,json:{write:!0}})],b.prototype,"colorRamp",void 0);d([c.reader("colorRamp")],
b.prototype,"readColorRamp",null);d([c.property({type:Boolean,json:{write:!0}})],b.prototype,"computeGamma",void 0);d([c.property({type:Boolean,json:{write:{target:"dra"},read:{source:"dra"}}})],b.prototype,"dynamicRangeAdjustment",void 0);d([c.property({type:[Number],json:{write:{allowNull:!0}}})],b.prototype,"gamma",void 0);d([c.property({type:Number,json:{write:{allowNull:!0}}})],b.prototype,"maxPercent",void 0);d([c.property({type:Number,json:{write:{allowNull:!0}}})],b.prototype,"minPercent",
void 0);d([c.property({type:Number,json:{write:{allowNull:!0}}})],b.prototype,"numberOfStandardDeviations",void 0);d([c.property({type:Number,json:{read:{source:"max"},write:{target:"max",allowNull:!0}}})],b.prototype,"outputMax",void 0);d([c.property({type:Number,json:{read:{source:"min"},write:{target:"min",allowNull:!0}}})],b.prototype,"outputMin",void 0);d([c.property({type:Number,json:{write:{allowNull:!0}}})],b.prototype,"sigmoidStrengthLevel",void 0);d([c.property({json:{write:{allowNull:!0}}})],
b.prototype,"statistics",void 0);d([c.property()],b.prototype,"histograms",void 0);d([c.writer("statistics")],b.prototype,"writeStatistics",null);d([c.property({type:Boolean,json:{write:!0}})],b.prototype,"useGamma",void 0);d([c.property({type:f.stretchTypeJSONDict.apiValues,json:{type:f.stretchTypeJSONDict.jsonValues,read:f.stretchTypeJSONDict.read,write:f.stretchTypeJSONDict.write}})],b.prototype,"stretchType",void 0);d([c.enumeration.serializable()({rasterStretch:"raster-stretch"})],b.prototype,
"type",void 0);return b=g=d([c.subclass("esri.renderers.RasterStretchRenderer")],b)}(c.declared(m.JSONSupport))});